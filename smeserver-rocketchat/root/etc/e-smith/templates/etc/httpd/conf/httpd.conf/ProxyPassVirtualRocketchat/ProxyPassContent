{
    use esmith::DomainsDB;
    use esmith::ConfigDB;
    my $db = esmith::DomainsDB->open_ro;
    my $config = esmith::ConfigDB->open_ro;
    my $domain  = $db->get($virtualHost);
    my $target  = $domain->get_prop('ProxyPassTarget') || 'http://127.0.0.1:3000';
    $target  =~ s~http[s]*://~~g; 
    my $SSLProxy = $config->get_prop('rocketchat', 'SSLProxy') || '';

    if ( $port eq "80" ) {
        $OUT .= "    # Alias for letsencrypt\n";
        $OUT .= "    Alias /.well-known/acme-challenge/ /home/e-smith/files/ibays/Primary/html/.well-known/acme-challenge/\n";
        $OUT .= "    # Everything else goes to https\n";
        $OUT .= "    RewriteRule ^/(.*|\$) https://%{HTTP_HOST}/\$1 [R,L]\n";
    }

    if ( $port eq "443" ) {

        $OUT .= "    # SSL Directives\n";
        $OUT .= "    SSLEngine on\n";
        $OUT .= "    ProxyPreserveHost On\n";
        $OUT .= "    # Letsencrypt - proxy bypass\n";
        $OUT .= "    ProxyPass /.well-known/acme-challenge/ !\n";
        $OUT .= "    ProxyPassMatch ^.*/sockjs/(.*)/websocket ws://$target/sockjs/\$1/websocket\n";
        $OUT .= "    ProxyPass /websocket ws://$target/websocket\n";
        $OUT .= "    ProxyPass /api/info http://$target/api/info\n";
        $OUT .= "    ProxyPass / http://$target/\n";
        $OUT .= "    ProxyPassReverse / http://$target/\n";
        $OUT .= "    # Letsencrypt - Alias processed after rewrite rules\n";
        $OUT .= "    Alias /.well-known/acme-challenge/ /home/e-smith/files/ibays/Primary/html/.well-known/acme-challenge/\n";
    }
}
