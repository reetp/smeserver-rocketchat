{
    use esmith::DomainsDB;
    use esmith::ConfigDB;
    my $domainsDB = esmith::DomainsDB->open_ro;
    my $configDB = esmith::ConfigDB->open_ro;
    my $target  = $domainDB->get_prop($virtualHost, 'ProxyPassTarget') || 'http://127.0.0.1:3000';
    $target  =~ s~http[s]*://~~g; 
    my $SSLProxy = $config->get_prop('rocketchat', 'SSLProxy') || '';

    if ( $port eq "80" ) {
    $OUT .= "# Host $virtualHost $target\n";
#        $OUT .= "    Header always unset Sec-WebSocket-Extensions\n";
        $OUT .= "    # Redirect Letsencrypt queries\n";
        $OUT .= "    RewriteRule ^/.well-known/acme-challenge(/.*|\$) https://%{HTTP_HOST}/.well-known/acme-challenge\$1 [L,R]\n";
        $OUT .= "    # Everything else goes to https\n";
        $OUT .= "    RewriteRule ^/(.*|\$) https://%{HTTP_HOST}/ [R,L]\n";

    }

    if ( $port eq "443" ) {

#        $OUT .= "    RewriteLogLevel 2\n";
#        $OUT .= "    RewriteLog \"/var/log/httpd/rewrite.log\"\n";
        $OUT .= "    # SSL Directives\n";
        $OUT .= "    SSLEngine on\n";
        $OUT .= "    ProxyPreserveHost On\n";
        $OUT .= "    SetEnv proxy-initial-not-pooled 1\n";
        $OUT .= "    # Letsencrypt - proxy bypass\n";
        $OUT .= "    ProxyPass /.well-known/acme-challenge/ !\n";
        $OUT .= "    ProxyPassMatch ^.*/sockjs/(.*)/websocket ws://$target/sockjs/\$1/websocket\n";
        $OUT .= "    ProxyPass /websocket ws://$target/websocket\n";
#        $OUT .= "    ProxyPass / http://$target/\n";
        $OUT .= "    ProxyPass / http://$target/ retry=1 acquire=3000 timeout=600 Keepalive=on\n";
        $OUT .= "    ProxyPassReverse / http://$target/\n";
        $OUT .= "    \n";
    }
}
